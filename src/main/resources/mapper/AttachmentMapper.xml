<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="net.novaborn.dao.AttachmentMapper" >
  <resultMap id="BaseResultMap" type="net.novaborn.entity.Attachment" >
    <id column="uid" property="uid" jdbcType="INTEGER" />
    <result column="userAddress" property="userAddress" jdbcType="VARCHAR" />
    <result column="mailBox" property="mailBox" jdbcType="VARCHAR" />
    <result column="path" property="path" jdbcType="VARCHAR" />
    <result column="size" property="size" jdbcType="INTEGER" />
    <result column="name" property="name" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    `uid`, userAddress, mailBox, `path`, `size`, `name`
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="net.novaborn.entity.AttachmentExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from Attachment
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from Attachment
    where `uid` = #{uid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from Attachment
    where `uid` = #{uid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="net.novaborn.entity.AttachmentExample" >
    delete from Attachment
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="net.novaborn.entity.Attachment" >
    insert into Attachment (`uid`, userAddress, mailBox, 
      `path`, `size`, `name`)
    values (#{uid,jdbcType=INTEGER}, #{userAddress,jdbcType=VARCHAR}, #{mailBox,jdbcType=VARCHAR}, 
      #{path,jdbcType=VARCHAR}, #{size,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="net.novaborn.entity.Attachment" >
    insert into Attachment
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="uid != null" >
        `uid`,
      </if>
      <if test="userAddress != null" >
        userAddress,
      </if>
      <if test="mailBox != null" >
        mailBox,
      </if>
      <if test="path != null" >
        `path`,
      </if>
      <if test="size != null" >
        `size`,
      </if>
      <if test="name != null" >
        `name`,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="uid != null" >
        #{uid,jdbcType=INTEGER},
      </if>
      <if test="userAddress != null" >
        #{userAddress,jdbcType=VARCHAR},
      </if>
      <if test="mailBox != null" >
        #{mailBox,jdbcType=VARCHAR},
      </if>
      <if test="path != null" >
        #{path,jdbcType=VARCHAR},
      </if>
      <if test="size != null" >
        #{size,jdbcType=INTEGER},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="net.novaborn.entity.AttachmentExample" resultType="java.lang.Integer" >
    select count(*) from Attachment
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update Attachment
    <set >
      <if test="record.uid != null" >
        `uid` = #{record.uid,jdbcType=INTEGER},
      </if>
      <if test="record.userAddress != null" >
        userAddress = #{record.userAddress,jdbcType=VARCHAR},
      </if>
      <if test="record.mailBox != null" >
        mailBox = #{record.mailBox,jdbcType=VARCHAR},
      </if>
      <if test="record.path != null" >
        `path` = #{record.path,jdbcType=VARCHAR},
      </if>
      <if test="record.size != null" >
        `size` = #{record.size,jdbcType=INTEGER},
      </if>
      <if test="record.name != null" >
        `name` = #{record.name,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update Attachment
    set `uid` = #{record.uid,jdbcType=INTEGER},
      userAddress = #{record.userAddress,jdbcType=VARCHAR},
      mailBox = #{record.mailBox,jdbcType=VARCHAR},
      `path` = #{record.path,jdbcType=VARCHAR},
      `size` = #{record.size,jdbcType=INTEGER},
      `name` = #{record.name,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="net.novaborn.entity.Attachment" >
    update Attachment
    <set >
      <if test="userAddress != null" >
        userAddress = #{userAddress,jdbcType=VARCHAR},
      </if>
      <if test="mailBox != null" >
        mailBox = #{mailBox,jdbcType=VARCHAR},
      </if>
      <if test="path != null" >
        `path` = #{path,jdbcType=VARCHAR},
      </if>
      <if test="size != null" >
        `size` = #{size,jdbcType=INTEGER},
      </if>
      <if test="name != null" >
        `name` = #{name,jdbcType=VARCHAR},
      </if>
    </set>
    where `uid` = #{uid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="net.novaborn.entity.Attachment" >
    update Attachment
    set userAddress = #{userAddress,jdbcType=VARCHAR},
      mailBox = #{mailBox,jdbcType=VARCHAR},
      `path` = #{path,jdbcType=VARCHAR},
      `size` = #{size,jdbcType=INTEGER},
      `name` = #{name,jdbcType=VARCHAR}
    where `uid` = #{uid,jdbcType=INTEGER}
  </update>
</mapper>