<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="net.novaborn.dao.MailboxMapper" >
  <resultMap id="BaseResultMap" type="net.novaborn.entity.Mailbox" >
    <id column="uid" property="uid" jdbcType="INTEGER" />
    <result column="id" property="id" jdbcType="INTEGER" />
    <result column="from" property="from" jdbcType="VARCHAR" />
    <result column="to" property="to" jdbcType="VARCHAR" />
    <result column="date" property="date" jdbcType="TIMESTAMP" />
    <result column="size" property="size" jdbcType="INTEGER" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="net.novaborn.entity.Mailbox" extends="BaseResultMap" >
    <result column="data" property="data" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    `uid`, id, `from`, `to`, `date`, `size`
  </sql>
  <sql id="Blob_Column_List" >
    `data`
  </sql>
  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="net.novaborn.entity.MailboxExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from MailBox
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="net.novaborn.entity.MailboxExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from MailBox
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from MailBox
    where `uid` = #{uid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from MailBox
    where `uid` = #{uid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="net.novaborn.entity.MailboxExample" >
    delete from MailBox
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="net.novaborn.entity.Mailbox" >
    insert into MailBox (`uid`, id, `from`, 
      `to`, `date`, `size`, `data`
      )
    values (#{uid,jdbcType=INTEGER}, #{id,jdbcType=INTEGER}, #{from,jdbcType=VARCHAR}, 
      #{to,jdbcType=VARCHAR}, #{date,jdbcType=TIMESTAMP}, #{size,jdbcType=INTEGER}, #{data,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="net.novaborn.entity.Mailbox" >
    insert into MailBox
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="uid != null" >
        `uid`,
      </if>
      <if test="id != null" >
        id,
      </if>
      <if test="from != null" >
        `from`,
      </if>
      <if test="to != null" >
        `to`,
      </if>
      <if test="date != null" >
        `date`,
      </if>
      <if test="size != null" >
        `size`,
      </if>
      <if test="data != null" >
        `data`,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="uid != null" >
        #{uid,jdbcType=INTEGER},
      </if>
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="from != null" >
        #{from,jdbcType=VARCHAR},
      </if>
      <if test="to != null" >
        #{to,jdbcType=VARCHAR},
      </if>
      <if test="date != null" >
        #{date,jdbcType=TIMESTAMP},
      </if>
      <if test="size != null" >
        #{size,jdbcType=INTEGER},
      </if>
      <if test="data != null" >
        #{data,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="net.novaborn.entity.MailboxExample" resultType="java.lang.Integer" >
    select count(*) from MailBox
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update MailBox
    <set >
      <if test="record.uid != null" >
        `uid` = #{record.uid,jdbcType=INTEGER},
      </if>
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.from != null" >
        `from` = #{record.from,jdbcType=VARCHAR},
      </if>
      <if test="record.to != null" >
        `to` = #{record.to,jdbcType=VARCHAR},
      </if>
      <if test="record.date != null" >
        `date` = #{record.date,jdbcType=TIMESTAMP},
      </if>
      <if test="record.size != null" >
        `size` = #{record.size,jdbcType=INTEGER},
      </if>
      <if test="record.data != null" >
        `data` = #{record.data,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map" >
    update MailBox
    set `uid` = #{record.uid,jdbcType=INTEGER},
      id = #{record.id,jdbcType=INTEGER},
      `from` = #{record.from,jdbcType=VARCHAR},
      `to` = #{record.to,jdbcType=VARCHAR},
      `date` = #{record.date,jdbcType=TIMESTAMP},
      `size` = #{record.size,jdbcType=INTEGER},
      `data` = #{record.data,jdbcType=LONGVARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update MailBox
    set `uid` = #{record.uid,jdbcType=INTEGER},
      id = #{record.id,jdbcType=INTEGER},
      `from` = #{record.from,jdbcType=VARCHAR},
      `to` = #{record.to,jdbcType=VARCHAR},
      `date` = #{record.date,jdbcType=TIMESTAMP},
      `size` = #{record.size,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="net.novaborn.entity.Mailbox" >
    update MailBox
    <set >
      <if test="id != null" >
        id = #{id,jdbcType=INTEGER},
      </if>
      <if test="from != null" >
        `from` = #{from,jdbcType=VARCHAR},
      </if>
      <if test="to != null" >
        `to` = #{to,jdbcType=VARCHAR},
      </if>
      <if test="date != null" >
        `date` = #{date,jdbcType=TIMESTAMP},
      </if>
      <if test="size != null" >
        `size` = #{size,jdbcType=INTEGER},
      </if>
      <if test="data != null" >
        `data` = #{data,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where `uid` = #{uid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="net.novaborn.entity.Mailbox" >
    update MailBox
    set id = #{id,jdbcType=INTEGER},
      `from` = #{from,jdbcType=VARCHAR},
      `to` = #{to,jdbcType=VARCHAR},
      `date` = #{date,jdbcType=TIMESTAMP},
      `size` = #{size,jdbcType=INTEGER},
      `data` = #{data,jdbcType=LONGVARCHAR}
    where `uid` = #{uid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="net.novaborn.entity.Mailbox" >
    update MailBox
    set id = #{id,jdbcType=INTEGER},
      `from` = #{from,jdbcType=VARCHAR},
      `to` = #{to,jdbcType=VARCHAR},
      `date` = #{date,jdbcType=TIMESTAMP},
      `size` = #{size,jdbcType=INTEGER}
    where `uid` = #{uid,jdbcType=INTEGER}
  </update>
</mapper>